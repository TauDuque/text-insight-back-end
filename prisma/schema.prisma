// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  // ✅ URL PLACEHOLDER: Será sobrescrita pelo código em runtime
  // Isso permite que o Prisma funcione com variáveis separadas (DB_USERNAME, DB_PASSWORD, etc.)
  url      = "postgresql://placeholder:placeholder@placeholder:5432/placeholder"
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relacionamentos
  apiKeys   ApiKey[]
  documents Document[]

  @@map("users")
}

model ApiKey {
  id        String   @id @default(uuid())
  key       String   @unique
  name      String
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  userId    String   @map("user_id")

  // Relacionamentos
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("api_keys")
}



model Document {
  id                String           @id @default(uuid())
  jobId             String?          @unique @map("job_id")
  originalName      String           @map("original_name")
  filename          String
  filePath          String?          @map("file_path")
  processedFilePath String?          @map("processed_file_path")
  size              Int
  mimeType          String           @map("mime_type")
  type              String           // image, pdf, text, document
  status            DocumentStatus   @default(PENDING)
  results           Json?
  error             String?
  processingTime    Int?             @map("processing_time") // em millisegundos
  createdAt         DateTime         @default(now()) @map("created_at")
  completedAt       DateTime?        @map("completed_at")
  userId            String           @map("user_id")

  // Relacionamentos
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("documents")
}

enum DocumentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}